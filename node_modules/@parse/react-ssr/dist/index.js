"use strict";
exports.__esModule = true;
exports.useParseQuery = exports.encodeParseQuery = exports.initializeParse = void 0;
var tslib_1 = require("tslib");
var react_1 = require("react");
var react_base_1 = require("@parse/react-base");
var isServer = typeof window === 'undefined';
if (process.browser) {
    global.Parse = require('parse');
}
else {
    global.Parse = require('parse/node');
}
var initializeParse = function (serverURL, applicationId, javascriptKey) {
    Parse.serverURL = serverURL;
    Parse.initialize(applicationId, javascriptKey);
    if (!isServer) {
        Parse.enableLocalDatastore();
    }
};
exports.initializeParse = initializeParse;
var encodeParseQuery = function (query) { return (0, tslib_1.__awaiter)(void 0, void 0, void 0, function () {
    var findResult, findError, e_1, encodedParseQuery;
    return (0, tslib_1.__generator)(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4 /*yield*/, query.find()];
            case 1:
                findResult = _a.sent();
                return [3 /*break*/, 3];
            case 2:
                e_1 = _a.sent();
                findError = e_1;
                return [3 /*break*/, 3];
            case 3:
                encodedParseQuery = {
                    className: query.className,
                    query: query.toJSON(),
                    findResult: findResult && Parse._encode(findResult) || undefined,
                    findError: findError && Parse._encode(findError) || undefined
                };
                if (!encodedParseQuery.findResult) {
                    delete encodedParseQuery.findResult;
                }
                if (!encodedParseQuery.findError) {
                    delete encodedParseQuery.findError;
                }
                return [2 /*return*/, encodedParseQuery];
        }
    });
}); };
exports.encodeParseQuery = encodeParseQuery;
var useParseQuery = function (query, options) {
    var _a, _b;
    if (query instanceof Parse.Query &&
        isServer) {
        return {
            isLoading: true,
            isLive: false,
            isSyncing: false,
            reload: function () { }
        };
    }
    var _c = (0, react_1.useMemo)(function () {
        if (query instanceof Parse.Query) {
            return {
                decodedQuery: query
            };
        }
        else {
            return {
                findResult: query.findResult && Parse._decode(query.findResult) || undefined,
                findError: query.findError && Parse._decode(query.findError) || undefined,
                decodedQuery: Parse.Query.fromJSON(query.className, query.query)
            };
        }
    }, [query]), findResult = _c.findResult, findError = _c.findError, decodedQuery = _c.decodedQuery;
    var _d = (0, react_1.useMemo)(function () { return ({
        findResultResults: findResult && (findResult.results || findResult) || undefined,
        findResultCount: findResult && findResult.count || undefined
    }); }, [findResult]), findResultResults = _d.findResultResults, findResultCount = _d.findResultCount;
    var serverReload = (0, react_1.useCallback)(function () {
        throw new Error('The reload function can not be used in the server side.');
    }, []);
    var serverResult = (0, react_1.useMemo)(function () { return ({
        isLoading: false,
        isLive: false,
        isSyncing: false,
        results: findResultResults,
        count: findResultCount,
        error: findError,
        reload: serverReload
    }); }, [findResultResults, findResultCount, findError, serverReload]);
    if (isServer) {
        return serverResult;
    }
    return (0, react_base_1.useParseQuery)(decodedQuery, {
        enabled: options && options.enabled || undefined,
        enableLocalDatastore: (_a = (options && options.enableLocalDatastore)) !== null && _a !== void 0 ? _a : undefined,
        enableLiveQuery: (_b = (options && options.enableLiveQuery)) !== null && _b !== void 0 ? _b : undefined,
        initialLoad: options && options.initialLoad ||
            findResult && {
                results: findResultResults,
                count: findResultCount
            } ||
            undefined
    });
};
exports.useParseQuery = useParseQuery;
//# sourceMappingURL=index.js.map